{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require */\n/* eslint-disable new-cap */\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['jquery', 'jquery-ui/ui/widget'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS:\n    factory(require('jquery'), require('./vendor/jquery.ui.widget'));\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n})(function ($) {\n  'use strict';\n\n  // Detect file input support, based on\n  // https://viljamis.com/2012/file-upload-support-on-mobile/\n  $.support.fileInput = !(new RegExp(\n  // Handle devices which give false positives for the feature detection:\n  '(Android (1\\\\.[0156]|2\\\\.[01]))' + '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' + '|(w(eb)?OSBrowser)|(webOS)' + '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))').test(window.navigator.userAgent) ||\n  // Feature detection for all other devices:\n  $('<input type=\"file\"/>').prop('disabled'));\n\n  // The FileReader API is not actually used, but works as feature detection,\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,\n  // but not non-multipart XHR file uploads.\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for\n  // window.ProgressEvent instead to detect XHR2 file upload capability:\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n  $.support.xhrFormDataFileUpload = !!window.FormData;\n\n  // Detect support for Blob slicing (required for chunked uploads):\n  $.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n  /**\n   * Helper function to create drag handlers for dragover/dragenter/dragleave\n   *\n   * @param {string} type Event type\n   * @returns {Function} Drag handler\n   */\n  function getDragHandler(type) {\n    var isDragOver = type === 'dragover';\n    return function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var dataTransfer = e.dataTransfer;\n      if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 && this._trigger(type, $.Event(type, {\n        delegatedEvent: e\n      })) !== false) {\n        e.preventDefault();\n        if (isDragOver) {\n          dataTransfer.dropEffect = 'copy';\n        }\n      }\n    };\n  }\n\n  // The fileupload widget listens for change events on file input fields defined\n  // via fileInput setting and paste or drop events of the given dropZone.\n  // In addition to the default jQuery Widget methods, the fileupload widget\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using\n  // the fileupload API.\n  // By default, files added via file input selection, paste, drag & drop or\n  // \"add\" method are uploaded immediately, but it is possible to override\n  // the \"add\" callback option to queue file uploads.\n  $.widget('blueimp.fileupload', {\n    options: {\n      // The drop target element(s), by the default the complete document.\n      // Set to null to disable drag & drop support:\n      dropZone: $(document),\n      // The paste target element(s), by the default undefined.\n      // Set to a DOM node or jQuery object to enable file pasting:\n      pasteZone: undefined,\n      // The file input field(s), that are listened to for change events.\n      // If undefined, it is set to the file input fields inside\n      // of the widget element on plugin initialization.\n      // Set to null to disable the change listener.\n      fileInput: undefined,\n      // By default, the file input field is replaced with a clone after\n      // each input field change event. This is required for iframe transport\n      // queues and allows change events to be fired for the same file\n      // selection, but can be disabled by setting the following option to false:\n      replaceFileInput: true,\n      // The parameter name for the file form data (the request argument name).\n      // If undefined or empty, the name property of the file input field is\n      // used, or \"files[]\" if the file input name property is also empty,\n      // can be a string or an array of strings:\n      paramName: undefined,\n      // By default, each file of a selection is uploaded using an individual\n      // request for XHR type uploads. Set to false to upload file\n      // selections in one request each:\n      singleFileUploads: true,\n      // To limit the number of files uploaded with one XHR request,\n      // set the following option to an integer greater than 0:\n      limitMultiFileUploads: undefined,\n      // The following option limits the number of files uploaded with one\n      // XHR request to keep the request size under or equal to the defined\n      // limit in bytes:\n      limitMultiFileUploadSize: undefined,\n      // Multipart file uploads add a number of bytes to each uploaded file,\n      // therefore the following option adds an overhead for each file used\n      // in the limitMultiFileUploadSize configuration:\n      limitMultiFileUploadSizeOverhead: 512,\n      // Set the following option to true to issue all file upload requests\n      // in a sequential order:\n      sequentialUploads: false,\n      // To limit the number of concurrent uploads,\n      // set the following option to an integer greater than 0:\n      limitConcurrentUploads: undefined,\n      // Set the following option to true to force iframe transport uploads:\n      forceIframeTransport: false,\n      // Set the following option to the location of a redirect url on the\n      // origin server, for cross-domain iframe transport uploads:\n      redirect: undefined,\n      // The parameter name for the redirect url, sent as part of the form\n      // data and set to 'redirect' if this option is empty:\n      redirectParamName: undefined,\n      // Set the following option to the location of a postMessage window,\n      // to enable postMessage transport uploads:\n      postMessage: undefined,\n      // By default, XHR file uploads are sent as multipart/form-data.\n      // The iframe transport is always using multipart/form-data.\n      // Set to false to enable non-multipart XHR uploads:\n      multipart: true,\n      // To upload large files in smaller chunks, set the following option\n      // to a preferred maximum chunk size. If set to 0, null or undefined,\n      // or the browser does not support the required Blob API, files will\n      // be uploaded as a whole.\n      maxChunkSize: undefined,\n      // When a non-multipart upload or a chunked multipart upload has been\n      // aborted, this option can be used to resume the upload by setting\n      // it to the size of the already uploaded bytes. This option is most\n      // useful when modifying the options object inside of the \"add\" or\n      // \"send\" callbacks, as the options are cloned for each file upload.\n      uploadedBytes: undefined,\n      // By default, failed (abort or error) file uploads are removed from the\n      // global progress calculation. Set the following option to false to\n      // prevent recalculating the global progress data:\n      recalculateProgress: true,\n      // Interval in milliseconds to calculate and trigger progress events:\n      progressInterval: 100,\n      // Interval in milliseconds to calculate progress bitrate:\n      bitrateInterval: 500,\n      // By default, uploads are started automatically when adding files:\n      autoUpload: true,\n      // By default, duplicate file names are expected to be handled on\n      // the server-side. If this is not possible (e.g. when uploading\n      // files directly to Amazon S3), the following option can be set to\n      // an empty object or an object mapping existing filenames, e.g.:\n      // { \"image.jpg\": true, \"image (1).jpg\": true }\n      // If it is set, all files will be uploaded with unique filenames,\n      // adding increasing number suffixes if necessary, e.g.:\n      // \"image (2).jpg\"\n      uniqueFilenames: undefined,\n      // Error and info messages:\n      messages: {\n        uploadedBytes: 'Uploaded bytes exceed file size'\n      },\n      // Translation function, gets the message key to be translated\n      // and an object with context specific data as arguments:\n      i18n: function (message, context) {\n        // eslint-disable-next-line no-param-reassign\n        message = this.messages[message] || message.toString();\n        if (context) {\n          $.each(context, function (key, value) {\n            // eslint-disable-next-line no-param-reassign\n            message = message.replace('{' + key + '}', value);\n          });\n        }\n        return message;\n      },\n      // Additional form data to be sent along with the file uploads can be set\n      // using this option, which accepts an array of objects with name and\n      // value properties, a function returning such an array, a FormData\n      // object (for XHR file uploads), or a simple object.\n      // The form of the first fileInput is given as parameter to the function:\n      formData: function (form) {\n        return form.serializeArray();\n      },\n      // The add callback is invoked as soon as files are added to the fileupload\n      // widget (via file input selection, drag & drop, paste or add API call).\n      // If the singleFileUploads option is enabled, this callback will be\n      // called once for each file in the selection for XHR file uploads, else\n      // once for each file selection.\n      //\n      // The upload starts when the submit method is invoked on the data parameter.\n      // The data object contains a files property holding the added files\n      // and allows you to override plugin options as well as define ajax settings.\n      //\n      // Listeners for this callback can also be bound the following way:\n      // .on('fileuploadadd', func);\n      //\n      // data.submit() returns a Promise object and allows to attach additional\n      // handlers using jQuery's Deferred callbacks:\n      // data.submit().done(func).fail(func).always(func);\n      add: function (e, data) {\n        if (e.isDefaultPrevented()) {\n          return false;\n        }\n        if (data.autoUpload || data.autoUpload !== false && $(this).fileupload('option', 'autoUpload')) {\n          data.process().done(function () {\n            data.submit();\n          });\n        }\n      },\n      // Other callbacks:\n\n      // Callback for the submit event of each file upload:\n      // submit: function (e, data) {}, // .on('fileuploadsubmit', func);\n\n      // Callback for the start of each file upload request:\n      // send: function (e, data) {}, // .on('fileuploadsend', func);\n\n      // Callback for successful uploads:\n      // done: function (e, data) {}, // .on('fileuploaddone', func);\n\n      // Callback for failed (abort or error) uploads:\n      // fail: function (e, data) {}, // .on('fileuploadfail', func);\n\n      // Callback for completed (success, abort or error) requests:\n      // always: function (e, data) {}, // .on('fileuploadalways', func);\n\n      // Callback for upload progress events:\n      // progress: function (e, data) {}, // .on('fileuploadprogress', func);\n\n      // Callback for global upload progress events:\n      // progressall: function (e, data) {}, // .on('fileuploadprogressall', func);\n\n      // Callback for uploads start, equivalent to the global ajaxStart event:\n      // start: function (e) {}, // .on('fileuploadstart', func);\n\n      // Callback for uploads stop, equivalent to the global ajaxStop event:\n      // stop: function (e) {}, // .on('fileuploadstop', func);\n\n      // Callback for change events of the fileInput(s):\n      // change: function (e, data) {}, // .on('fileuploadchange', func);\n\n      // Callback for paste events to the pasteZone(s):\n      // paste: function (e, data) {}, // .on('fileuploadpaste', func);\n\n      // Callback for drop events of the dropZone(s):\n      // drop: function (e, data) {}, // .on('fileuploaddrop', func);\n\n      // Callback for dragover events of the dropZone(s):\n      // dragover: function (e) {}, // .on('fileuploaddragover', func);\n\n      // Callback before the start of each chunk upload request (before form data initialization):\n      // chunkbeforesend: function (e, data) {}, // .on('fileuploadchunkbeforesend', func);\n\n      // Callback for the start of each chunk upload request:\n      // chunksend: function (e, data) {}, // .on('fileuploadchunksend', func);\n\n      // Callback for successful chunk uploads:\n      // chunkdone: function (e, data) {}, // .on('fileuploadchunkdone', func);\n\n      // Callback for failed (abort or error) chunk uploads:\n      // chunkfail: function (e, data) {}, // .on('fileuploadchunkfail', func);\n\n      // Callback for completed (success, abort or error) chunk upload requests:\n      // chunkalways: function (e, data) {}, // .on('fileuploadchunkalways', func);\n\n      // The plugin options are used as settings object for the ajax calls.\n      // The following are jQuery ajax settings required for the file uploads:\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 0\n    },\n    // jQuery versions before 1.8 require promise.pipe if the return value is\n    // used, as promise.then in older versions has a different behavior, see:\n    // https://blog.jquery.com/2012/08/09/jquery-1-8-released/\n    // https://bugs.jquery.com/ticket/11010\n    // https://github.com/blueimp/jQuery-File-Upload/pull/3435\n    _promisePipe: function () {\n      var parts = $.fn.jquery.split('.');\n      return Number(parts[0]) > 1 || Number(parts[1]) > 7 ? 'then' : 'pipe';\n    }(),\n    // A list of options that require reinitializing event listeners and/or\n    // special initialization code:\n    _specialOptions: ['fileInput', 'dropZone', 'pasteZone', 'multipart', 'forceIframeTransport'],\n    _blobSlice: $.support.blobSlice && function () {\n      var slice = this.slice || this.webkitSlice || this.mozSlice;\n      return slice.apply(this, arguments);\n    },\n    _BitrateTimer: function () {\n      this.timestamp = Date.now ? Date.now() : new Date().getTime();\n      this.loaded = 0;\n      this.bitrate = 0;\n      this.getBitrate = function (now, loaded, interval) {\n        var timeDiff = now - this.timestamp;\n        if (!this.bitrate || !interval || timeDiff > interval) {\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n          this.loaded = loaded;\n          this.timestamp = now;\n        }\n        return this.bitrate;\n      };\n    },\n    _isXHRUpload: function (options) {\n      return !options.forceIframeTransport && (!options.multipart && $.support.xhrFileUpload || $.support.xhrFormDataFileUpload);\n    },\n    _getFormData: function (options) {\n      var formData;\n      if ($.type(options.formData) === 'function') {\n        return options.formData(options.form);\n      }\n      if ($.isArray(options.formData)) {\n        return options.formData;\n      }\n      if ($.type(options.formData) === 'object') {\n        formData = [];\n        $.each(options.formData, function (name, value) {\n          formData.push({\n            name: name,\n            value: value\n          });\n        });\n        return formData;\n      }\n      return [];\n    },\n    _getTotal: function (files) {\n      var total = 0;\n      $.each(files, function (index, file) {\n        total += file.size || 1;\n      });\n      return total;\n    },\n    _initProgressObject: function (obj) {\n      var progress = {\n        loaded: 0,\n        total: 0,\n        bitrate: 0\n      };\n      if (obj._progress) {\n        $.extend(obj._progress, progress);\n      } else {\n        obj._progress = progress;\n      }\n    },\n    _initResponseObject: function (obj) {\n      var prop;\n      if (obj._response) {\n        for (prop in obj._response) {\n          if (Object.prototype.hasOwnProperty.call(obj._response, prop)) {\n            delete obj._response[prop];\n          }\n        }\n      } else {\n        obj._response = {};\n      }\n    },\n    _onProgress: function (e, data) {\n      if (e.lengthComputable) {\n        var now = Date.now ? Date.now() : new Date().getTime(),\n          loaded;\n        if (data._time && data.progressInterval && now - data._time < data.progressInterval && e.loaded !== e.total) {\n          return;\n        }\n        data._time = now;\n        loaded = Math.floor(e.loaded / e.total * (data.chunkSize || data._progress.total)) + (data.uploadedBytes || 0);\n        // Add the difference from the previously loaded state\n        // to the global loaded counter:\n        this._progress.loaded += loaded - data._progress.loaded;\n        this._progress.bitrate = this._bitrateTimer.getBitrate(now, this._progress.loaded, data.bitrateInterval);\n        data._progress.loaded = data.loaded = loaded;\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval);\n        // Trigger a custom progress event with a total data property set\n        // to the file size(s) of the current upload and a loaded data\n        // property calculated accordingly:\n        this._trigger('progress', $.Event('progress', {\n          delegatedEvent: e\n        }), data);\n        // Trigger a global progress event for all current file uploads,\n        // including ajax calls queued for sequential file uploads:\n        this._trigger('progressall', $.Event('progressall', {\n          delegatedEvent: e\n        }), this._progress);\n      }\n    },\n    _initProgressListener: function (options) {\n      var that = this,\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      // Access to the native XHR object is required to add event listeners\n      // for the upload progress event:\n      if (xhr.upload) {\n        $(xhr.upload).on('progress', function (e) {\n          var oe = e.originalEvent;\n          // Make sure the progress event properties get copied over:\n          e.lengthComputable = oe.lengthComputable;\n          e.loaded = oe.loaded;\n          e.total = oe.total;\n          that._onProgress(e, options);\n        });\n        options.xhr = function () {\n          return xhr;\n        };\n      }\n    },\n    _deinitProgressListener: function (options) {\n      var xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      if (xhr.upload) {\n        $(xhr.upload).off('progress');\n      }\n    },\n    _isInstanceOf: function (type, obj) {\n      // Cross-frame instanceof check\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n    },\n    _getUniqueFilename: function (name, map) {\n      // eslint-disable-next-line no-param-reassign\n      name = String(name);\n      if (map[name]) {\n        // eslint-disable-next-line no-param-reassign\n        name = name.replace(/(?: \\(([\\d]+)\\))?(\\.[^.]+)?$/, function (_, p1, p2) {\n          var index = p1 ? Number(p1) + 1 : 1;\n          var ext = p2 || '';\n          return ' (' + index + ')' + ext;\n        });\n        return this._getUniqueFilename(name, map);\n      }\n      map[name] = true;\n      return name;\n    },\n    _initXHRData: function (options) {\n      var that = this,\n        formData,\n        file = options.files[0],\n        // Ignore non-multipart setting if not supported:\n        multipart = options.multipart || !$.support.xhrFileUpload,\n        paramName = $.type(options.paramName) === 'array' ? options.paramName[0] : options.paramName;\n      options.headers = $.extend({}, options.headers);\n      if (options.contentRange) {\n        options.headers['Content-Range'] = options.contentRange;\n      }\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n        options.headers['Content-Disposition'] = 'attachment; filename=\"' + encodeURI(file.uploadName || file.name) + '\"';\n      }\n      if (!multipart) {\n        options.contentType = file.type || 'application/octet-stream';\n        options.data = options.blob || file;\n      } else if ($.support.xhrFormDataFileUpload) {\n        if (options.postMessage) {\n          // window.postMessage does not allow sending FormData\n          // objects, so we just add the File/Blob objects to\n          // the formData array and let the postMessage window\n          // create the FormData object out of this array:\n          formData = this._getFormData(options);\n          if (options.blob) {\n            formData.push({\n              name: paramName,\n              value: options.blob\n            });\n          } else {\n            $.each(options.files, function (index, file) {\n              formData.push({\n                name: $.type(options.paramName) === 'array' && options.paramName[index] || paramName,\n                value: file\n              });\n            });\n          }\n        } else {\n          if (that._isInstanceOf('FormData', options.formData)) {\n            formData = options.formData;\n          } else {\n            formData = new FormData();\n            $.each(this._getFormData(options), function (index, field) {\n              formData.append(field.name, field.value);\n            });\n          }\n          if (options.blob) {\n            formData.append(paramName, options.blob, file.uploadName || file.name);\n          } else {\n            $.each(options.files, function (index, file) {\n              // This check allows the tests to run with\n              // dummy objects:\n              if (that._isInstanceOf('File', file) || that._isInstanceOf('Blob', file)) {\n                var fileName = file.uploadName || file.name;\n                if (options.uniqueFilenames) {\n                  fileName = that._getUniqueFilename(fileName, options.uniqueFilenames);\n                }\n                formData.append($.type(options.paramName) === 'array' && options.paramName[index] || paramName, file, fileName);\n              }\n            });\n          }\n        }\n        options.data = formData;\n      }\n      // Blob reference is not needed anymore, free memory:\n      options.blob = null;\n    },\n    _initIframeSettings: function (options) {\n      var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n      // Setting the dataType to iframe enables the iframe transport:\n      options.dataType = 'iframe ' + (options.dataType || '');\n      // The iframe transport accepts a serialized array as form data:\n      options.formData = this._getFormData(options);\n      // Add redirect url to form data on cross-domain uploads:\n      if (options.redirect && targetHost && targetHost !== location.host) {\n        options.formData.push({\n          name: options.redirectParamName || 'redirect',\n          value: options.redirect\n        });\n      }\n    },\n    _initDataSettings: function (options) {\n      if (this._isXHRUpload(options)) {\n        if (!this._chunkedUpload(options, true)) {\n          if (!options.data) {\n            this._initXHRData(options);\n          }\n          this._initProgressListener(options);\n        }\n        if (options.postMessage) {\n          // Setting the dataType to postmessage enables the\n          // postMessage transport:\n          options.dataType = 'postmessage ' + (options.dataType || '');\n        }\n      } else {\n        this._initIframeSettings(options);\n      }\n    },\n    _getParamName: function (options) {\n      var fileInput = $(options.fileInput),\n        paramName = options.paramName;\n      if (!paramName) {\n        paramName = [];\n        fileInput.each(function () {\n          var input = $(this),\n            name = input.prop('name') || 'files[]',\n            i = (input.prop('files') || [1]).length;\n          while (i) {\n            paramName.push(name);\n            i -= 1;\n          }\n        });\n        if (!paramName.length) {\n          paramName = [fileInput.prop('name') || 'files[]'];\n        }\n      } else if (!$.isArray(paramName)) {\n        paramName = [paramName];\n      }\n      return paramName;\n    },\n    _initFormSettings: function (options) {\n      // Retrieve missing options from the input field and the\n      // associated form, if available:\n      if (!options.form || !options.form.length) {\n        options.form = $(options.fileInput.prop('form'));\n        // If the given file input doesn't have an associated form,\n        // use the default widget file input's form:\n        if (!options.form.length) {\n          options.form = $(this.options.fileInput.prop('form'));\n        }\n      }\n      options.paramName = this._getParamName(options);\n      if (!options.url) {\n        options.url = options.form.prop('action') || location.href;\n      }\n      // The HTTP request method must be \"POST\" or \"PUT\":\n      options.type = (options.type || $.type(options.form.prop('method')) === 'string' && options.form.prop('method') || '').toUpperCase();\n      if (options.type !== 'POST' && options.type !== 'PUT' && options.type !== 'PATCH') {\n        options.type = 'POST';\n      }\n      if (!options.formAcceptCharset) {\n        options.formAcceptCharset = options.form.attr('accept-charset');\n      }\n    },\n    _getAJAXSettings: function (data) {\n      var options = $.extend({}, this.options, data);\n      this._initFormSettings(options);\n      this._initDataSettings(options);\n      return options;\n    },\n    // jQuery 1.6 doesn't provide .state(),\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():\n    _getDeferredState: function (deferred) {\n      if (deferred.state) {\n        return deferred.state();\n      }\n      if (deferred.isResolved()) {\n        return 'resolved';\n      }\n      if (deferred.isRejected()) {\n        return 'rejected';\n      }\n      return 'pending';\n    },\n    // Maps jqXHR callbacks to the equivalent\n    // methods of the given Promise object:\n    _enhancePromise: function (promise) {\n      promise.success = promise.done;\n      promise.error = promise.fail;\n      promise.complete = promise.always;\n      return promise;\n    },\n    // Creates and returns a Promise object enhanced with\n    // the jqXHR methods abort, success, error and complete:\n    _getXHRPromise: function (resolveOrReject, context, args) {\n      var dfd = $.Deferred(),\n        promise = dfd.promise();\n      // eslint-disable-next-line no-param-reassign\n      context = context || this.options.context || promise;\n      if (resolveOrReject === true) {\n        dfd.resolveWith(context, args);\n      } else if (resolveOrReject === false) {\n        dfd.rejectWith(context, args);\n      }\n      promise.abort = dfd.promise;\n      return this._enhancePromise(promise);\n    },\n    // Adds convenience methods to the data callback argument:\n    _addConvenienceMethods: function (e, data) {\n      var that = this,\n        getPromise = function (args) {\n          return $.Deferred().resolveWith(that, args).promise();\n        };\n      data.process = function (resolveFunc, rejectFunc) {\n        if (resolveFunc || rejectFunc) {\n          data._processQueue = this._processQueue = (this._processQueue || getPromise([this]))[that._promisePipe](function () {\n            if (data.errorThrown) {\n              return $.Deferred().rejectWith(that, [data]).promise();\n            }\n            return getPromise(arguments);\n          })[that._promisePipe](resolveFunc, rejectFunc);\n        }\n        return this._processQueue || getPromise([this]);\n      };\n      data.submit = function () {\n        if (this.state() !== 'pending') {\n          data.jqXHR = this.jqXHR = that._trigger('submit', $.Event('submit', {\n            delegatedEvent: e\n          }), this) !== false && that._onSend(e, this);\n        }\n        return this.jqXHR || that._getXHRPromise();\n      };\n      data.abort = function () {\n        if (this.jqXHR) {\n          return this.jqXHR.abort();\n        }\n        this.errorThrown = 'abort';\n        that._trigger('fail', null, this);\n        return that._getXHRPromise(false);\n      };\n      data.state = function () {\n        if (this.jqXHR) {\n          return that._getDeferredState(this.jqXHR);\n        }\n        if (this._processQueue) {\n          return that._getDeferredState(this._processQueue);\n        }\n      };\n      data.processing = function () {\n        return !this.jqXHR && this._processQueue && that._getDeferredState(this._processQueue) === 'pending';\n      };\n      data.progress = function () {\n        return this._progress;\n      };\n      data.response = function () {\n        return this._response;\n      };\n    },\n    // Parses the Range header from the server response\n    // and returns the uploaded bytes:\n    _getUploadedBytes: function (jqXHR) {\n      var range = jqXHR.getResponseHeader('Range'),\n        parts = range && range.split('-'),\n        upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);\n      return upperBytesPos && upperBytesPos + 1;\n    },\n    // Uploads a file in multiple, sequential requests\n    // by splitting the file up in multiple blob chunks.\n    // If the second parameter is true, only tests if the file\n    // should be uploaded in chunks, but does not invoke any\n    // upload requests:\n    _chunkedUpload: function (options, testOnly) {\n      options.uploadedBytes = options.uploadedBytes || 0;\n      var that = this,\n        file = options.files[0],\n        fs = file.size,\n        ub = options.uploadedBytes,\n        mcs = options.maxChunkSize || fs,\n        slice = this._blobSlice,\n        dfd = $.Deferred(),\n        promise = dfd.promise(),\n        jqXHR,\n        upload;\n      if (!(this._isXHRUpload(options) && slice && (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)) || options.data) {\n        return false;\n      }\n      if (testOnly) {\n        return true;\n      }\n      if (ub >= fs) {\n        file.error = options.i18n('uploadedBytes');\n        return this._getXHRPromise(false, options.context, [null, 'error', file.error]);\n      }\n      // The chunk upload method:\n      upload = function () {\n        // Clone the options object for each chunk upload:\n        var o = $.extend({}, options),\n          currentLoaded = o._progress.loaded;\n        o.blob = slice.call(file, ub, ub + ($.type(mcs) === 'function' ? mcs(o) : mcs), file.type);\n        // Store the current chunk size, as the blob itself\n        // will be dereferenced after data processing:\n        o.chunkSize = o.blob.size;\n        // Expose the chunk bytes position range:\n        o.contentRange = 'bytes ' + ub + '-' + (ub + o.chunkSize - 1) + '/' + fs;\n        // Trigger chunkbeforesend to allow form data to be updated for this chunk\n        that._trigger('chunkbeforesend', null, o);\n        // Process the upload data (the blob and potential form data):\n        that._initXHRData(o);\n        // Add progress listeners for this chunk upload:\n        that._initProgressListener(o);\n        jqXHR = (that._trigger('chunksend', null, o) !== false && $.ajax(o) || that._getXHRPromise(false, o.context)).done(function (result, textStatus, jqXHR) {\n          ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;\n          // Create a progress event if no final progress event\n          // with loaded equaling total has been triggered\n          // for this chunk:\n          if (currentLoaded + o.chunkSize - o._progress.loaded) {\n            that._onProgress($.Event('progress', {\n              lengthComputable: true,\n              loaded: ub - o.uploadedBytes,\n              total: ub - o.uploadedBytes\n            }), o);\n          }\n          options.uploadedBytes = o.uploadedBytes = ub;\n          o.result = result;\n          o.textStatus = textStatus;\n          o.jqXHR = jqXHR;\n          that._trigger('chunkdone', null, o);\n          that._trigger('chunkalways', null, o);\n          if (ub < fs) {\n            // File upload not yet complete,\n            // continue with the next chunk:\n            upload();\n          } else {\n            dfd.resolveWith(o.context, [result, textStatus, jqXHR]);\n          }\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          o.jqXHR = jqXHR;\n          o.textStatus = textStatus;\n          o.errorThrown = errorThrown;\n          that._trigger('chunkfail', null, o);\n          that._trigger('chunkalways', null, o);\n          dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);\n        }).always(function () {\n          that._deinitProgressListener(o);\n        });\n      };\n      this._enhancePromise(promise);\n      promise.abort = function () {\n        return jqXHR.abort();\n      };\n      upload();\n      return promise;\n    },\n    _beforeSend: function (e, data) {\n      if (this._active === 0) {\n        // the start callback is triggered when an upload starts\n        // and no other uploads are currently running,\n        // equivalent to the global ajaxStart event:\n        this._trigger('start');\n        // Set timer for global bitrate progress calculation:\n        this._bitrateTimer = new this._BitrateTimer();\n        // Reset the global progress values:\n        this._progress.loaded = this._progress.total = 0;\n        this._progress.bitrate = 0;\n      }\n      // Make sure the container objects for the .response() and\n      // .progress() methods on the data object are available\n      // and reset to their initial state:\n      this._initResponseObject(data);\n      this._initProgressObject(data);\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n      data._progress.total = data.total = this._getTotal(data.files) || 1;\n      data._progress.bitrate = data.bitrate = 0;\n      this._active += 1;\n      // Initialize the global progress values:\n      this._progress.loaded += data.loaded;\n      this._progress.total += data.total;\n    },\n    _onDone: function (result, textStatus, jqXHR, options) {\n      var total = options._progress.total,\n        response = options._response;\n      if (options._progress.loaded < total) {\n        // Create a progress event if no final progress event\n        // with loaded equaling total has been triggered:\n        this._onProgress($.Event('progress', {\n          lengthComputable: true,\n          loaded: total,\n          total: total\n        }), options);\n      }\n      response.result = options.result = result;\n      response.textStatus = options.textStatus = textStatus;\n      response.jqXHR = options.jqXHR = jqXHR;\n      this._trigger('done', null, options);\n    },\n    _onFail: function (jqXHR, textStatus, errorThrown, options) {\n      var response = options._response;\n      if (options.recalculateProgress) {\n        // Remove the failed (error or abort) file upload from\n        // the global progress calculation:\n        this._progress.loaded -= options._progress.loaded;\n        this._progress.total -= options._progress.total;\n      }\n      response.jqXHR = options.jqXHR = jqXHR;\n      response.textStatus = options.textStatus = textStatus;\n      response.errorThrown = options.errorThrown = errorThrown;\n      this._trigger('fail', null, options);\n    },\n    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n      // jqXHRorResult, textStatus and jqXHRorError are added to the\n      // options object via done and fail callbacks\n      this._trigger('always', null, options);\n    },\n    _onSend: function (e, data) {\n      if (!data.submit) {\n        this._addConvenienceMethods(e, data);\n      }\n      var that = this,\n        jqXHR,\n        aborted,\n        slot,\n        pipe,\n        options = that._getAJAXSettings(data),\n        send = function () {\n          that._sending += 1;\n          // Set timer for bitrate progress calculation:\n          options._bitrateTimer = new that._BitrateTimer();\n          jqXHR = jqXHR || ((aborted || that._trigger('send', $.Event('send', {\n            delegatedEvent: e\n          }), options) === false) && that._getXHRPromise(false, options.context, aborted) || that._chunkedUpload(options) || $.ajax(options)).done(function (result, textStatus, jqXHR) {\n            that._onDone(result, textStatus, jqXHR, options);\n          }).fail(function (jqXHR, textStatus, errorThrown) {\n            that._onFail(jqXHR, textStatus, errorThrown, options);\n          }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n            that._deinitProgressListener(options);\n            that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);\n            that._sending -= 1;\n            that._active -= 1;\n            if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {\n              // Start the next queued upload,\n              // that has not been aborted:\n              var nextSlot = that._slots.shift();\n              while (nextSlot) {\n                if (that._getDeferredState(nextSlot) === 'pending') {\n                  nextSlot.resolve();\n                  break;\n                }\n                nextSlot = that._slots.shift();\n              }\n            }\n            if (that._active === 0) {\n              // The stop callback is triggered when all uploads have\n              // been completed, equivalent to the global ajaxStop event:\n              that._trigger('stop');\n            }\n          });\n          return jqXHR;\n        };\n      this._beforeSend(e, options);\n      if (this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending) {\n        if (this.options.limitConcurrentUploads > 1) {\n          slot = $.Deferred();\n          this._slots.push(slot);\n          pipe = slot[that._promisePipe](send);\n        } else {\n          this._sequence = this._sequence[that._promisePipe](send, send);\n          pipe = this._sequence;\n        }\n        // Return the piped Promise object, enhanced with an abort method,\n        // which is delegated to the jqXHR object of the current upload,\n        // and jqXHR callbacks mapped to the equivalent Promise methods:\n        pipe.abort = function () {\n          aborted = [undefined, 'abort', 'abort'];\n          if (!jqXHR) {\n            if (slot) {\n              slot.rejectWith(options.context, aborted);\n            }\n            return send();\n          }\n          return jqXHR.abort();\n        };\n        return this._enhancePromise(pipe);\n      }\n      return send();\n    },\n    _onAdd: function (e, data) {\n      var that = this,\n        result = true,\n        options = $.extend({}, this.options, data),\n        files = data.files,\n        filesLength = files.length,\n        limit = options.limitMultiFileUploads,\n        limitSize = options.limitMultiFileUploadSize,\n        overhead = options.limitMultiFileUploadSizeOverhead,\n        batchSize = 0,\n        paramName = this._getParamName(options),\n        paramNameSet,\n        paramNameSlice,\n        fileSet,\n        i,\n        j = 0;\n      if (!filesLength) {\n        return false;\n      }\n      if (limitSize && files[0].size === undefined) {\n        limitSize = undefined;\n      }\n      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {\n        fileSet = [files];\n        paramNameSet = [paramName];\n      } else if (!(options.singleFileUploads || limitSize) && limit) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i += limit) {\n          fileSet.push(files.slice(i, i + limit));\n          paramNameSlice = paramName.slice(i, i + limit);\n          if (!paramNameSlice.length) {\n            paramNameSlice = paramName;\n          }\n          paramNameSet.push(paramNameSlice);\n        }\n      } else if (!options.singleFileUploads && limitSize) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i = i + 1) {\n          batchSize += files[i].size + overhead;\n          if (i + 1 === filesLength || batchSize + files[i + 1].size + overhead > limitSize || limit && i + 1 - j >= limit) {\n            fileSet.push(files.slice(j, i + 1));\n            paramNameSlice = paramName.slice(j, i + 1);\n            if (!paramNameSlice.length) {\n              paramNameSlice = paramName;\n            }\n            paramNameSet.push(paramNameSlice);\n            j = i + 1;\n            batchSize = 0;\n          }\n        }\n      } else {\n        paramNameSet = paramName;\n      }\n      data.originalFiles = files;\n      $.each(fileSet || files, function (index, element) {\n        var newData = $.extend({}, data);\n        newData.files = fileSet ? element : [element];\n        newData.paramName = paramNameSet[index];\n        that._initResponseObject(newData);\n        that._initProgressObject(newData);\n        that._addConvenienceMethods(e, newData);\n        result = that._trigger('add', $.Event('add', {\n          delegatedEvent: e\n        }), newData);\n        return result;\n      });\n      return result;\n    },\n    _replaceFileInput: function (data) {\n      var input = data.fileInput,\n        inputClone = input.clone(true),\n        restoreFocus = input.is(document.activeElement);\n      // Add a reference for the new cloned file input to the data argument:\n      data.fileInputClone = inputClone;\n      $('<form></form>').append(inputClone)[0].reset();\n      // Detaching allows to insert the fileInput on another form\n      // without losing the file input value:\n      input.after(inputClone).detach();\n      // If the fileInput had focus before it was detached,\n      // restore focus to the inputClone.\n      if (restoreFocus) {\n        inputClone.trigger('focus');\n      }\n      // Avoid memory leaks with the detached file input:\n      $.cleanData(input.off('remove'));\n      // Replace the original file input element in the fileInput\n      // elements set with the clone, which has been copied including\n      // event handlers:\n      this.options.fileInput = this.options.fileInput.map(function (i, el) {\n        if (el === input[0]) {\n          return inputClone[0];\n        }\n        return el;\n      });\n      // If the widget has been initialized on the file input itself,\n      // override this.element with the file input clone:\n      if (input[0] === this.element[0]) {\n        this.element = inputClone;\n      }\n    },\n    _handleFileTreeEntry: function (entry, path) {\n      var that = this,\n        dfd = $.Deferred(),\n        entries = [],\n        dirReader,\n        errorHandler = function (e) {\n          if (e && !e.entry) {\n            e.entry = entry;\n          }\n          // Since $.when returns immediately if one\n          // Deferred is rejected, we use resolve instead.\n          // This allows valid files and invalid items\n          // to be returned together in one set:\n          dfd.resolve([e]);\n        },\n        successHandler = function (entries) {\n          that._handleFileTreeEntries(entries, path + entry.name + '/').done(function (files) {\n            dfd.resolve(files);\n          }).fail(errorHandler);\n        },\n        readEntries = function () {\n          dirReader.readEntries(function (results) {\n            if (!results.length) {\n              successHandler(entries);\n            } else {\n              entries = entries.concat(results);\n              readEntries();\n            }\n          }, errorHandler);\n        };\n      // eslint-disable-next-line no-param-reassign\n      path = path || '';\n      if (entry.isFile) {\n        if (entry._file) {\n          // Workaround for Chrome bug #149735\n          entry._file.relativePath = path;\n          dfd.resolve(entry._file);\n        } else {\n          entry.file(function (file) {\n            file.relativePath = path;\n            dfd.resolve(file);\n          }, errorHandler);\n        }\n      } else if (entry.isDirectory) {\n        dirReader = entry.createReader();\n        readEntries();\n      } else {\n        // Return an empty list for file system items\n        // other than files or directories:\n        dfd.resolve([]);\n      }\n      return dfd.promise();\n    },\n    _handleFileTreeEntries: function (entries, path) {\n      var that = this;\n      return $.when.apply($, $.map(entries, function (entry) {\n        return that._handleFileTreeEntry(entry, path);\n      }))[this._promisePipe](function () {\n        return Array.prototype.concat.apply([], arguments);\n      });\n    },\n    _getDroppedFiles: function (dataTransfer) {\n      // eslint-disable-next-line no-param-reassign\n      dataTransfer = dataTransfer || {};\n      var items = dataTransfer.items;\n      if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {\n        return this._handleFileTreeEntries($.map(items, function (item) {\n          var entry;\n          if (item.webkitGetAsEntry) {\n            entry = item.webkitGetAsEntry();\n            if (entry) {\n              // Workaround for Chrome bug #149735:\n              entry._file = item.getAsFile();\n            }\n            return entry;\n          }\n          return item.getAsEntry();\n        }));\n      }\n      return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();\n    },\n    _getSingleFileInputFiles: function (fileInput) {\n      // eslint-disable-next-line no-param-reassign\n      fileInput = $(fileInput);\n      var entries = fileInput.prop('entries'),\n        files,\n        value;\n      if (entries && entries.length) {\n        return this._handleFileTreeEntries(entries);\n      }\n      files = $.makeArray(fileInput.prop('files'));\n      if (!files.length) {\n        value = fileInput.prop('value');\n        if (!value) {\n          return $.Deferred().resolve([]).promise();\n        }\n        // If the files property is not available, the browser does not\n        // support the File API and we add a pseudo File object with\n        // the input value as name with path information removed:\n        files = [{\n          name: value.replace(/^.*\\\\/, '')\n        }];\n      } else if (files[0].name === undefined && files[0].fileName) {\n        // File normalization for Safari 4 and Firefox 3:\n        $.each(files, function (index, file) {\n          file.name = file.fileName;\n          file.size = file.fileSize;\n        });\n      }\n      return $.Deferred().resolve(files).promise();\n    },\n    _getFileInputFiles: function (fileInput) {\n      if (!(fileInput instanceof $) || fileInput.length === 1) {\n        return this._getSingleFileInputFiles(fileInput);\n      }\n      return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles))[this._promisePipe](function () {\n        return Array.prototype.concat.apply([], arguments);\n      });\n    },\n    _onChange: function (e) {\n      var that = this,\n        data = {\n          fileInput: $(e.target),\n          form: $(e.target.form)\n        };\n      this._getFileInputFiles(data.fileInput).always(function (files) {\n        data.files = files;\n        if (that.options.replaceFileInput) {\n          that._replaceFileInput(data);\n        }\n        if (that._trigger('change', $.Event('change', {\n          delegatedEvent: e\n        }), data) !== false) {\n          that._onAdd(e, data);\n        }\n      });\n    },\n    _onPaste: function (e) {\n      var items = e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.items,\n        data = {\n          files: []\n        };\n      if (items && items.length) {\n        $.each(items, function (index, item) {\n          var file = item.getAsFile && item.getAsFile();\n          if (file) {\n            data.files.push(file);\n          }\n        });\n        if (this._trigger('paste', $.Event('paste', {\n          delegatedEvent: e\n        }), data) !== false) {\n          this._onAdd(e, data);\n        }\n      }\n    },\n    _onDrop: function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var that = this,\n        dataTransfer = e.dataTransfer,\n        data = {};\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n        e.preventDefault();\n        this._getDroppedFiles(dataTransfer).always(function (files) {\n          data.files = files;\n          if (that._trigger('drop', $.Event('drop', {\n            delegatedEvent: e\n          }), data) !== false) {\n            that._onAdd(e, data);\n          }\n        });\n      }\n    },\n    _onDragOver: getDragHandler('dragover'),\n    _onDragEnter: getDragHandler('dragenter'),\n    _onDragLeave: getDragHandler('dragleave'),\n    _initEventHandlers: function () {\n      if (this._isXHRUpload(this.options)) {\n        this._on(this.options.dropZone, {\n          dragover: this._onDragOver,\n          drop: this._onDrop,\n          // event.preventDefault() on dragenter is required for IE10+:\n          dragenter: this._onDragEnter,\n          // dragleave is not required, but added for completeness:\n          dragleave: this._onDragLeave\n        });\n        this._on(this.options.pasteZone, {\n          paste: this._onPaste\n        });\n      }\n      if ($.support.fileInput) {\n        this._on(this.options.fileInput, {\n          change: this._onChange\n        });\n      }\n    },\n    _destroyEventHandlers: function () {\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n      this._off(this.options.pasteZone, 'paste');\n      this._off(this.options.fileInput, 'change');\n    },\n    _destroy: function () {\n      this._destroyEventHandlers();\n    },\n    _setOption: function (key, value) {\n      var reinit = $.inArray(key, this._specialOptions) !== -1;\n      if (reinit) {\n        this._destroyEventHandlers();\n      }\n      this._super(key, value);\n      if (reinit) {\n        this._initSpecialOptions();\n        this._initEventHandlers();\n      }\n    },\n    _initSpecialOptions: function () {\n      var options = this.options;\n      if (options.fileInput === undefined) {\n        options.fileInput = this.element.is('input[type=\"file\"]') ? this.element : this.element.find('input[type=\"file\"]');\n      } else if (!(options.fileInput instanceof $)) {\n        options.fileInput = $(options.fileInput);\n      }\n      if (!(options.dropZone instanceof $)) {\n        options.dropZone = $(options.dropZone);\n      }\n      if (!(options.pasteZone instanceof $)) {\n        options.pasteZone = $(options.pasteZone);\n      }\n    },\n    _getRegExp: function (str) {\n      var parts = str.split('/'),\n        modifiers = parts.pop();\n      parts.shift();\n      return new RegExp(parts.join('/'), modifiers);\n    },\n    _isRegExpOption: function (key, value) {\n      return key !== 'url' && $.type(value) === 'string' && /^\\/.*\\/[igm]{0,3}$/.test(value);\n    },\n    _initDataAttributes: function () {\n      var that = this,\n        options = this.options,\n        data = this.element.data();\n      // Initialize options set via HTML5 data-attributes:\n      $.each(this.element[0].attributes, function (index, attr) {\n        var key = attr.name.toLowerCase(),\n          value;\n        if (/^data-/.test(key)) {\n          // Convert hyphen-ated key to camelCase:\n          key = key.slice(5).replace(/-[a-z]/g, function (str) {\n            return str.charAt(1).toUpperCase();\n          });\n          value = data[key];\n          if (that._isRegExpOption(key, value)) {\n            value = that._getRegExp(value);\n          }\n          options[key] = value;\n        }\n      });\n    },\n    _create: function () {\n      this._initDataAttributes();\n      this._initSpecialOptions();\n      this._slots = [];\n      this._sequence = this._getXHRPromise(true);\n      this._sending = this._active = 0;\n      this._initProgressObject(this);\n      this._initEventHandlers();\n    },\n    // This method is exposed to the widget API and allows to query\n    // the number of active uploads:\n    active: function () {\n      return this._active;\n    },\n    // This method is exposed to the widget API and allows to query\n    // the widget upload progress.\n    // It returns an object with loaded, total and bitrate properties\n    // for the running uploads:\n    progress: function () {\n      return this._progress;\n    },\n    // This method is exposed to the widget API and allows adding files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files property and can contain additional options:\n    // .fileupload('add', {files: filesList});\n    add: function (data) {\n      var that = this;\n      if (!data || this.options.disabled) {\n        return;\n      }\n      if (data.fileInput && !data.files) {\n        this._getFileInputFiles(data.fileInput).always(function (files) {\n          data.files = files;\n          that._onAdd(null, data);\n        });\n      } else {\n        data.files = $.makeArray(data.files);\n        this._onAdd(null, data);\n      }\n    },\n    // This method is exposed to the widget API and allows sending files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files or fileInput property and can contain additional options:\n    // .fileupload('send', {files: filesList});\n    // The method returns a Promise object for the file upload call.\n    send: function (data) {\n      if (data && !this.options.disabled) {\n        if (data.fileInput && !data.files) {\n          var that = this,\n            dfd = $.Deferred(),\n            promise = dfd.promise(),\n            jqXHR,\n            aborted;\n          promise.abort = function () {\n            aborted = true;\n            if (jqXHR) {\n              return jqXHR.abort();\n            }\n            dfd.reject(null, 'abort', 'abort');\n            return promise;\n          };\n          this._getFileInputFiles(data.fileInput).always(function (files) {\n            if (aborted) {\n              return;\n            }\n            if (!files.length) {\n              dfd.reject();\n              return;\n            }\n            data.files = files;\n            jqXHR = that._onSend(null, data);\n            jqXHR.then(function (result, textStatus, jqXHR) {\n              dfd.resolve(result, textStatus, jqXHR);\n            }, function (jqXHR, textStatus, errorThrown) {\n              dfd.reject(jqXHR, textStatus, errorThrown);\n            });\n          });\n          return this._enhancePromise(promise);\n        }\n        data.files = $.makeArray(data.files);\n        if (data.files.length) {\n          return this._onSend(null, data);\n        }\n      }\n      return this._getXHRPromise(false, data && data.context);\n    }\n  });\n});","map":{"version":3,"names":["factory","define","amd","exports","require","window","jQuery","$","support","fileInput","RegExp","test","navigator","userAgent","prop","xhrFileUpload","ProgressEvent","FileReader","xhrFormDataFileUpload","FormData","blobSlice","Blob","prototype","slice","webkitSlice","mozSlice","getDragHandler","type","isDragOver","e","dataTransfer","originalEvent","inArray","types","_trigger","Event","delegatedEvent","preventDefault","dropEffect","widget","options","dropZone","document","pasteZone","undefined","replaceFileInput","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","forceIframeTransport","redirect","redirectParamName","postMessage","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","uniqueFilenames","messages","i18n","message","context","toString","each","key","value","replace","formData","form","serializeArray","add","data","isDefaultPrevented","fileupload","process","done","submit","processData","contentType","cache","timeout","_promisePipe","parts","fn","jquery","split","Number","_specialOptions","_blobSlice","apply","arguments","_BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","_isXHRUpload","_getFormData","isArray","name","push","_getTotal","files","total","index","file","size","_initProgressObject","obj","progress","_progress","extend","_initResponseObject","_response","Object","hasOwnProperty","call","_onProgress","lengthComputable","_time","Math","floor","chunkSize","_bitrateTimer","_initProgressListener","that","xhr","ajaxSettings","upload","on","oe","_deinitProgressListener","off","_isInstanceOf","_getUniqueFilename","map","String","_","p1","p2","ext","_initXHRData","headers","contentRange","blob","encodeURI","uploadName","field","append","fileName","_initIframeSettings","targetHost","url","dataType","location","host","_initDataSettings","_chunkedUpload","_getParamName","input","i","length","_initFormSettings","href","toUpperCase","formAcceptCharset","attr","_getAJAXSettings","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","promise","success","error","fail","complete","always","_getXHRPromise","resolveOrReject","args","dfd","Deferred","resolveWith","rejectWith","abort","_addConvenienceMethods","getPromise","resolveFunc","rejectFunc","_processQueue","errorThrown","jqXHR","_onSend","processing","response","_getUploadedBytes","range","getResponseHeader","upperBytesPos","parseInt","testOnly","fs","ub","mcs","o","currentLoaded","ajax","result","textStatus","_beforeSend","_active","_onDone","_onFail","_onAlways","jqXHRorResult","jqXHRorError","aborted","slot","pipe","send","_sending","nextSlot","_slots","shift","resolve","_sequence","_onAdd","filesLength","limit","limitSize","overhead","batchSize","paramNameSet","paramNameSlice","fileSet","j","originalFiles","element","newData","_replaceFileInput","inputClone","clone","restoreFocus","is","activeElement","fileInputClone","reset","after","detach","trigger","cleanData","el","_handleFileTreeEntry","entry","path","entries","dirReader","errorHandler","successHandler","_handleFileTreeEntries","readEntries","results","concat","isFile","_file","relativePath","isDirectory","createReader","when","Array","_getDroppedFiles","items","webkitGetAsEntry","getAsEntry","item","getAsFile","makeArray","_getSingleFileInputFiles","fileSize","_getFileInputFiles","_onChange","target","_onPaste","clipboardData","_onDrop","_onDragOver","_onDragEnter","_onDragLeave","_initEventHandlers","_on","dragover","drop","dragenter","dragleave","paste","change","_destroyEventHandlers","_off","_destroy","_setOption","reinit","_super","_initSpecialOptions","find","_getRegExp","str","modifiers","pop","join","_isRegExpOption","_initDataAttributes","attributes","toLowerCase","charAt","_create","active","disabled","reject","then"],"sources":["C:/xampp/htdocs/assessment_test/mystaff_frontend/node_modules/blueimp-file-upload/js/jquery.fileupload.js"],"sourcesContent":["/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require */\n/* eslint-disable new-cap */\n\n(function (factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['jquery', 'jquery-ui/ui/widget'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS:\n    factory(require('jquery'), require('./vendor/jquery.ui.widget'));\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n})(function ($) {\n  'use strict';\n\n  // Detect file input support, based on\n  // https://viljamis.com/2012/file-upload-support-on-mobile/\n  $.support.fileInput = !(\n    new RegExp(\n      // Handle devices which give false positives for the feature detection:\n      '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n        '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n        '|(w(eb)?OSBrowser)|(webOS)' +\n        '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n    // Feature detection for all other devices:\n    $('<input type=\"file\"/>').prop('disabled')\n  );\n\n  // The FileReader API is not actually used, but works as feature detection,\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,\n  // but not non-multipart XHR file uploads.\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for\n  // window.ProgressEvent instead to detect XHR2 file upload capability:\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n  $.support.xhrFormDataFileUpload = !!window.FormData;\n\n  // Detect support for Blob slicing (required for chunked uploads):\n  $.support.blobSlice =\n    window.Blob &&\n    (Blob.prototype.slice ||\n      Blob.prototype.webkitSlice ||\n      Blob.prototype.mozSlice);\n\n  /**\n   * Helper function to create drag handlers for dragover/dragenter/dragleave\n   *\n   * @param {string} type Event type\n   * @returns {Function} Drag handler\n   */\n  function getDragHandler(type) {\n    var isDragOver = type === 'dragover';\n    return function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var dataTransfer = e.dataTransfer;\n      if (\n        dataTransfer &&\n        $.inArray('Files', dataTransfer.types) !== -1 &&\n        this._trigger(type, $.Event(type, { delegatedEvent: e })) !== false\n      ) {\n        e.preventDefault();\n        if (isDragOver) {\n          dataTransfer.dropEffect = 'copy';\n        }\n      }\n    };\n  }\n\n  // The fileupload widget listens for change events on file input fields defined\n  // via fileInput setting and paste or drop events of the given dropZone.\n  // In addition to the default jQuery Widget methods, the fileupload widget\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using\n  // the fileupload API.\n  // By default, files added via file input selection, paste, drag & drop or\n  // \"add\" method are uploaded immediately, but it is possible to override\n  // the \"add\" callback option to queue file uploads.\n  $.widget('blueimp.fileupload', {\n    options: {\n      // The drop target element(s), by the default the complete document.\n      // Set to null to disable drag & drop support:\n      dropZone: $(document),\n      // The paste target element(s), by the default undefined.\n      // Set to a DOM node or jQuery object to enable file pasting:\n      pasteZone: undefined,\n      // The file input field(s), that are listened to for change events.\n      // If undefined, it is set to the file input fields inside\n      // of the widget element on plugin initialization.\n      // Set to null to disable the change listener.\n      fileInput: undefined,\n      // By default, the file input field is replaced with a clone after\n      // each input field change event. This is required for iframe transport\n      // queues and allows change events to be fired for the same file\n      // selection, but can be disabled by setting the following option to false:\n      replaceFileInput: true,\n      // The parameter name for the file form data (the request argument name).\n      // If undefined or empty, the name property of the file input field is\n      // used, or \"files[]\" if the file input name property is also empty,\n      // can be a string or an array of strings:\n      paramName: undefined,\n      // By default, each file of a selection is uploaded using an individual\n      // request for XHR type uploads. Set to false to upload file\n      // selections in one request each:\n      singleFileUploads: true,\n      // To limit the number of files uploaded with one XHR request,\n      // set the following option to an integer greater than 0:\n      limitMultiFileUploads: undefined,\n      // The following option limits the number of files uploaded with one\n      // XHR request to keep the request size under or equal to the defined\n      // limit in bytes:\n      limitMultiFileUploadSize: undefined,\n      // Multipart file uploads add a number of bytes to each uploaded file,\n      // therefore the following option adds an overhead for each file used\n      // in the limitMultiFileUploadSize configuration:\n      limitMultiFileUploadSizeOverhead: 512,\n      // Set the following option to true to issue all file upload requests\n      // in a sequential order:\n      sequentialUploads: false,\n      // To limit the number of concurrent uploads,\n      // set the following option to an integer greater than 0:\n      limitConcurrentUploads: undefined,\n      // Set the following option to true to force iframe transport uploads:\n      forceIframeTransport: false,\n      // Set the following option to the location of a redirect url on the\n      // origin server, for cross-domain iframe transport uploads:\n      redirect: undefined,\n      // The parameter name for the redirect url, sent as part of the form\n      // data and set to 'redirect' if this option is empty:\n      redirectParamName: undefined,\n      // Set the following option to the location of a postMessage window,\n      // to enable postMessage transport uploads:\n      postMessage: undefined,\n      // By default, XHR file uploads are sent as multipart/form-data.\n      // The iframe transport is always using multipart/form-data.\n      // Set to false to enable non-multipart XHR uploads:\n      multipart: true,\n      // To upload large files in smaller chunks, set the following option\n      // to a preferred maximum chunk size. If set to 0, null or undefined,\n      // or the browser does not support the required Blob API, files will\n      // be uploaded as a whole.\n      maxChunkSize: undefined,\n      // When a non-multipart upload or a chunked multipart upload has been\n      // aborted, this option can be used to resume the upload by setting\n      // it to the size of the already uploaded bytes. This option is most\n      // useful when modifying the options object inside of the \"add\" or\n      // \"send\" callbacks, as the options are cloned for each file upload.\n      uploadedBytes: undefined,\n      // By default, failed (abort or error) file uploads are removed from the\n      // global progress calculation. Set the following option to false to\n      // prevent recalculating the global progress data:\n      recalculateProgress: true,\n      // Interval in milliseconds to calculate and trigger progress events:\n      progressInterval: 100,\n      // Interval in milliseconds to calculate progress bitrate:\n      bitrateInterval: 500,\n      // By default, uploads are started automatically when adding files:\n      autoUpload: true,\n      // By default, duplicate file names are expected to be handled on\n      // the server-side. If this is not possible (e.g. when uploading\n      // files directly to Amazon S3), the following option can be set to\n      // an empty object or an object mapping existing filenames, e.g.:\n      // { \"image.jpg\": true, \"image (1).jpg\": true }\n      // If it is set, all files will be uploaded with unique filenames,\n      // adding increasing number suffixes if necessary, e.g.:\n      // \"image (2).jpg\"\n      uniqueFilenames: undefined,\n\n      // Error and info messages:\n      messages: {\n        uploadedBytes: 'Uploaded bytes exceed file size'\n      },\n\n      // Translation function, gets the message key to be translated\n      // and an object with context specific data as arguments:\n      i18n: function (message, context) {\n        // eslint-disable-next-line no-param-reassign\n        message = this.messages[message] || message.toString();\n        if (context) {\n          $.each(context, function (key, value) {\n            // eslint-disable-next-line no-param-reassign\n            message = message.replace('{' + key + '}', value);\n          });\n        }\n        return message;\n      },\n\n      // Additional form data to be sent along with the file uploads can be set\n      // using this option, which accepts an array of objects with name and\n      // value properties, a function returning such an array, a FormData\n      // object (for XHR file uploads), or a simple object.\n      // The form of the first fileInput is given as parameter to the function:\n      formData: function (form) {\n        return form.serializeArray();\n      },\n\n      // The add callback is invoked as soon as files are added to the fileupload\n      // widget (via file input selection, drag & drop, paste or add API call).\n      // If the singleFileUploads option is enabled, this callback will be\n      // called once for each file in the selection for XHR file uploads, else\n      // once for each file selection.\n      //\n      // The upload starts when the submit method is invoked on the data parameter.\n      // The data object contains a files property holding the added files\n      // and allows you to override plugin options as well as define ajax settings.\n      //\n      // Listeners for this callback can also be bound the following way:\n      // .on('fileuploadadd', func);\n      //\n      // data.submit() returns a Promise object and allows to attach additional\n      // handlers using jQuery's Deferred callbacks:\n      // data.submit().done(func).fail(func).always(func);\n      add: function (e, data) {\n        if (e.isDefaultPrevented()) {\n          return false;\n        }\n        if (\n          data.autoUpload ||\n          (data.autoUpload !== false &&\n            $(this).fileupload('option', 'autoUpload'))\n        ) {\n          data.process().done(function () {\n            data.submit();\n          });\n        }\n      },\n\n      // Other callbacks:\n\n      // Callback for the submit event of each file upload:\n      // submit: function (e, data) {}, // .on('fileuploadsubmit', func);\n\n      // Callback for the start of each file upload request:\n      // send: function (e, data) {}, // .on('fileuploadsend', func);\n\n      // Callback for successful uploads:\n      // done: function (e, data) {}, // .on('fileuploaddone', func);\n\n      // Callback for failed (abort or error) uploads:\n      // fail: function (e, data) {}, // .on('fileuploadfail', func);\n\n      // Callback for completed (success, abort or error) requests:\n      // always: function (e, data) {}, // .on('fileuploadalways', func);\n\n      // Callback for upload progress events:\n      // progress: function (e, data) {}, // .on('fileuploadprogress', func);\n\n      // Callback for global upload progress events:\n      // progressall: function (e, data) {}, // .on('fileuploadprogressall', func);\n\n      // Callback for uploads start, equivalent to the global ajaxStart event:\n      // start: function (e) {}, // .on('fileuploadstart', func);\n\n      // Callback for uploads stop, equivalent to the global ajaxStop event:\n      // stop: function (e) {}, // .on('fileuploadstop', func);\n\n      // Callback for change events of the fileInput(s):\n      // change: function (e, data) {}, // .on('fileuploadchange', func);\n\n      // Callback for paste events to the pasteZone(s):\n      // paste: function (e, data) {}, // .on('fileuploadpaste', func);\n\n      // Callback for drop events of the dropZone(s):\n      // drop: function (e, data) {}, // .on('fileuploaddrop', func);\n\n      // Callback for dragover events of the dropZone(s):\n      // dragover: function (e) {}, // .on('fileuploaddragover', func);\n\n      // Callback before the start of each chunk upload request (before form data initialization):\n      // chunkbeforesend: function (e, data) {}, // .on('fileuploadchunkbeforesend', func);\n\n      // Callback for the start of each chunk upload request:\n      // chunksend: function (e, data) {}, // .on('fileuploadchunksend', func);\n\n      // Callback for successful chunk uploads:\n      // chunkdone: function (e, data) {}, // .on('fileuploadchunkdone', func);\n\n      // Callback for failed (abort or error) chunk uploads:\n      // chunkfail: function (e, data) {}, // .on('fileuploadchunkfail', func);\n\n      // Callback for completed (success, abort or error) chunk upload requests:\n      // chunkalways: function (e, data) {}, // .on('fileuploadchunkalways', func);\n\n      // The plugin options are used as settings object for the ajax calls.\n      // The following are jQuery ajax settings required for the file uploads:\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 0\n    },\n\n    // jQuery versions before 1.8 require promise.pipe if the return value is\n    // used, as promise.then in older versions has a different behavior, see:\n    // https://blog.jquery.com/2012/08/09/jquery-1-8-released/\n    // https://bugs.jquery.com/ticket/11010\n    // https://github.com/blueimp/jQuery-File-Upload/pull/3435\n    _promisePipe: (function () {\n      var parts = $.fn.jquery.split('.');\n      return Number(parts[0]) > 1 || Number(parts[1]) > 7 ? 'then' : 'pipe';\n    })(),\n\n    // A list of options that require reinitializing event listeners and/or\n    // special initialization code:\n    _specialOptions: [\n      'fileInput',\n      'dropZone',\n      'pasteZone',\n      'multipart',\n      'forceIframeTransport'\n    ],\n\n    _blobSlice:\n      $.support.blobSlice &&\n      function () {\n        var slice = this.slice || this.webkitSlice || this.mozSlice;\n        return slice.apply(this, arguments);\n      },\n\n    _BitrateTimer: function () {\n      this.timestamp = Date.now ? Date.now() : new Date().getTime();\n      this.loaded = 0;\n      this.bitrate = 0;\n      this.getBitrate = function (now, loaded, interval) {\n        var timeDiff = now - this.timestamp;\n        if (!this.bitrate || !interval || timeDiff > interval) {\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n          this.loaded = loaded;\n          this.timestamp = now;\n        }\n        return this.bitrate;\n      };\n    },\n\n    _isXHRUpload: function (options) {\n      return (\n        !options.forceIframeTransport &&\n        ((!options.multipart && $.support.xhrFileUpload) ||\n          $.support.xhrFormDataFileUpload)\n      );\n    },\n\n    _getFormData: function (options) {\n      var formData;\n      if ($.type(options.formData) === 'function') {\n        return options.formData(options.form);\n      }\n      if ($.isArray(options.formData)) {\n        return options.formData;\n      }\n      if ($.type(options.formData) === 'object') {\n        formData = [];\n        $.each(options.formData, function (name, value) {\n          formData.push({ name: name, value: value });\n        });\n        return formData;\n      }\n      return [];\n    },\n\n    _getTotal: function (files) {\n      var total = 0;\n      $.each(files, function (index, file) {\n        total += file.size || 1;\n      });\n      return total;\n    },\n\n    _initProgressObject: function (obj) {\n      var progress = {\n        loaded: 0,\n        total: 0,\n        bitrate: 0\n      };\n      if (obj._progress) {\n        $.extend(obj._progress, progress);\n      } else {\n        obj._progress = progress;\n      }\n    },\n\n    _initResponseObject: function (obj) {\n      var prop;\n      if (obj._response) {\n        for (prop in obj._response) {\n          if (Object.prototype.hasOwnProperty.call(obj._response, prop)) {\n            delete obj._response[prop];\n          }\n        }\n      } else {\n        obj._response = {};\n      }\n    },\n\n    _onProgress: function (e, data) {\n      if (e.lengthComputable) {\n        var now = Date.now ? Date.now() : new Date().getTime(),\n          loaded;\n        if (\n          data._time &&\n          data.progressInterval &&\n          now - data._time < data.progressInterval &&\n          e.loaded !== e.total\n        ) {\n          return;\n        }\n        data._time = now;\n        loaded =\n          Math.floor(\n            (e.loaded / e.total) * (data.chunkSize || data._progress.total)\n          ) + (data.uploadedBytes || 0);\n        // Add the difference from the previously loaded state\n        // to the global loaded counter:\n        this._progress.loaded += loaded - data._progress.loaded;\n        this._progress.bitrate = this._bitrateTimer.getBitrate(\n          now,\n          this._progress.loaded,\n          data.bitrateInterval\n        );\n        data._progress.loaded = data.loaded = loaded;\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n          now,\n          loaded,\n          data.bitrateInterval\n        );\n        // Trigger a custom progress event with a total data property set\n        // to the file size(s) of the current upload and a loaded data\n        // property calculated accordingly:\n        this._trigger(\n          'progress',\n          $.Event('progress', { delegatedEvent: e }),\n          data\n        );\n        // Trigger a global progress event for all current file uploads,\n        // including ajax calls queued for sequential file uploads:\n        this._trigger(\n          'progressall',\n          $.Event('progressall', { delegatedEvent: e }),\n          this._progress\n        );\n      }\n    },\n\n    _initProgressListener: function (options) {\n      var that = this,\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      // Access to the native XHR object is required to add event listeners\n      // for the upload progress event:\n      if (xhr.upload) {\n        $(xhr.upload).on('progress', function (e) {\n          var oe = e.originalEvent;\n          // Make sure the progress event properties get copied over:\n          e.lengthComputable = oe.lengthComputable;\n          e.loaded = oe.loaded;\n          e.total = oe.total;\n          that._onProgress(e, options);\n        });\n        options.xhr = function () {\n          return xhr;\n        };\n      }\n    },\n\n    _deinitProgressListener: function (options) {\n      var xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      if (xhr.upload) {\n        $(xhr.upload).off('progress');\n      }\n    },\n\n    _isInstanceOf: function (type, obj) {\n      // Cross-frame instanceof check\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n    },\n\n    _getUniqueFilename: function (name, map) {\n      // eslint-disable-next-line no-param-reassign\n      name = String(name);\n      if (map[name]) {\n        // eslint-disable-next-line no-param-reassign\n        name = name.replace(\n          /(?: \\(([\\d]+)\\))?(\\.[^.]+)?$/,\n          function (_, p1, p2) {\n            var index = p1 ? Number(p1) + 1 : 1;\n            var ext = p2 || '';\n            return ' (' + index + ')' + ext;\n          }\n        );\n        return this._getUniqueFilename(name, map);\n      }\n      map[name] = true;\n      return name;\n    },\n\n    _initXHRData: function (options) {\n      var that = this,\n        formData,\n        file = options.files[0],\n        // Ignore non-multipart setting if not supported:\n        multipart = options.multipart || !$.support.xhrFileUpload,\n        paramName =\n          $.type(options.paramName) === 'array'\n            ? options.paramName[0]\n            : options.paramName;\n      options.headers = $.extend({}, options.headers);\n      if (options.contentRange) {\n        options.headers['Content-Range'] = options.contentRange;\n      }\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n        options.headers['Content-Disposition'] =\n          'attachment; filename=\"' +\n          encodeURI(file.uploadName || file.name) +\n          '\"';\n      }\n      if (!multipart) {\n        options.contentType = file.type || 'application/octet-stream';\n        options.data = options.blob || file;\n      } else if ($.support.xhrFormDataFileUpload) {\n        if (options.postMessage) {\n          // window.postMessage does not allow sending FormData\n          // objects, so we just add the File/Blob objects to\n          // the formData array and let the postMessage window\n          // create the FormData object out of this array:\n          formData = this._getFormData(options);\n          if (options.blob) {\n            formData.push({\n              name: paramName,\n              value: options.blob\n            });\n          } else {\n            $.each(options.files, function (index, file) {\n              formData.push({\n                name:\n                  ($.type(options.paramName) === 'array' &&\n                    options.paramName[index]) ||\n                  paramName,\n                value: file\n              });\n            });\n          }\n        } else {\n          if (that._isInstanceOf('FormData', options.formData)) {\n            formData = options.formData;\n          } else {\n            formData = new FormData();\n            $.each(this._getFormData(options), function (index, field) {\n              formData.append(field.name, field.value);\n            });\n          }\n          if (options.blob) {\n            formData.append(\n              paramName,\n              options.blob,\n              file.uploadName || file.name\n            );\n          } else {\n            $.each(options.files, function (index, file) {\n              // This check allows the tests to run with\n              // dummy objects:\n              if (\n                that._isInstanceOf('File', file) ||\n                that._isInstanceOf('Blob', file)\n              ) {\n                var fileName = file.uploadName || file.name;\n                if (options.uniqueFilenames) {\n                  fileName = that._getUniqueFilename(\n                    fileName,\n                    options.uniqueFilenames\n                  );\n                }\n                formData.append(\n                  ($.type(options.paramName) === 'array' &&\n                    options.paramName[index]) ||\n                    paramName,\n                  file,\n                  fileName\n                );\n              }\n            });\n          }\n        }\n        options.data = formData;\n      }\n      // Blob reference is not needed anymore, free memory:\n      options.blob = null;\n    },\n\n    _initIframeSettings: function (options) {\n      var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n      // Setting the dataType to iframe enables the iframe transport:\n      options.dataType = 'iframe ' + (options.dataType || '');\n      // The iframe transport accepts a serialized array as form data:\n      options.formData = this._getFormData(options);\n      // Add redirect url to form data on cross-domain uploads:\n      if (options.redirect && targetHost && targetHost !== location.host) {\n        options.formData.push({\n          name: options.redirectParamName || 'redirect',\n          value: options.redirect\n        });\n      }\n    },\n\n    _initDataSettings: function (options) {\n      if (this._isXHRUpload(options)) {\n        if (!this._chunkedUpload(options, true)) {\n          if (!options.data) {\n            this._initXHRData(options);\n          }\n          this._initProgressListener(options);\n        }\n        if (options.postMessage) {\n          // Setting the dataType to postmessage enables the\n          // postMessage transport:\n          options.dataType = 'postmessage ' + (options.dataType || '');\n        }\n      } else {\n        this._initIframeSettings(options);\n      }\n    },\n\n    _getParamName: function (options) {\n      var fileInput = $(options.fileInput),\n        paramName = options.paramName;\n      if (!paramName) {\n        paramName = [];\n        fileInput.each(function () {\n          var input = $(this),\n            name = input.prop('name') || 'files[]',\n            i = (input.prop('files') || [1]).length;\n          while (i) {\n            paramName.push(name);\n            i -= 1;\n          }\n        });\n        if (!paramName.length) {\n          paramName = [fileInput.prop('name') || 'files[]'];\n        }\n      } else if (!$.isArray(paramName)) {\n        paramName = [paramName];\n      }\n      return paramName;\n    },\n\n    _initFormSettings: function (options) {\n      // Retrieve missing options from the input field and the\n      // associated form, if available:\n      if (!options.form || !options.form.length) {\n        options.form = $(options.fileInput.prop('form'));\n        // If the given file input doesn't have an associated form,\n        // use the default widget file input's form:\n        if (!options.form.length) {\n          options.form = $(this.options.fileInput.prop('form'));\n        }\n      }\n      options.paramName = this._getParamName(options);\n      if (!options.url) {\n        options.url = options.form.prop('action') || location.href;\n      }\n      // The HTTP request method must be \"POST\" or \"PUT\":\n      options.type = (\n        options.type ||\n        ($.type(options.form.prop('method')) === 'string' &&\n          options.form.prop('method')) ||\n        ''\n      ).toUpperCase();\n      if (\n        options.type !== 'POST' &&\n        options.type !== 'PUT' &&\n        options.type !== 'PATCH'\n      ) {\n        options.type = 'POST';\n      }\n      if (!options.formAcceptCharset) {\n        options.formAcceptCharset = options.form.attr('accept-charset');\n      }\n    },\n\n    _getAJAXSettings: function (data) {\n      var options = $.extend({}, this.options, data);\n      this._initFormSettings(options);\n      this._initDataSettings(options);\n      return options;\n    },\n\n    // jQuery 1.6 doesn't provide .state(),\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():\n    _getDeferredState: function (deferred) {\n      if (deferred.state) {\n        return deferred.state();\n      }\n      if (deferred.isResolved()) {\n        return 'resolved';\n      }\n      if (deferred.isRejected()) {\n        return 'rejected';\n      }\n      return 'pending';\n    },\n\n    // Maps jqXHR callbacks to the equivalent\n    // methods of the given Promise object:\n    _enhancePromise: function (promise) {\n      promise.success = promise.done;\n      promise.error = promise.fail;\n      promise.complete = promise.always;\n      return promise;\n    },\n\n    // Creates and returns a Promise object enhanced with\n    // the jqXHR methods abort, success, error and complete:\n    _getXHRPromise: function (resolveOrReject, context, args) {\n      var dfd = $.Deferred(),\n        promise = dfd.promise();\n      // eslint-disable-next-line no-param-reassign\n      context = context || this.options.context || promise;\n      if (resolveOrReject === true) {\n        dfd.resolveWith(context, args);\n      } else if (resolveOrReject === false) {\n        dfd.rejectWith(context, args);\n      }\n      promise.abort = dfd.promise;\n      return this._enhancePromise(promise);\n    },\n\n    // Adds convenience methods to the data callback argument:\n    _addConvenienceMethods: function (e, data) {\n      var that = this,\n        getPromise = function (args) {\n          return $.Deferred().resolveWith(that, args).promise();\n        };\n      data.process = function (resolveFunc, rejectFunc) {\n        if (resolveFunc || rejectFunc) {\n          data._processQueue = this._processQueue = (this._processQueue ||\n            getPromise([this]))\n            [that._promisePipe](function () {\n              if (data.errorThrown) {\n                return $.Deferred().rejectWith(that, [data]).promise();\n              }\n              return getPromise(arguments);\n            })\n            [that._promisePipe](resolveFunc, rejectFunc);\n        }\n        return this._processQueue || getPromise([this]);\n      };\n      data.submit = function () {\n        if (this.state() !== 'pending') {\n          data.jqXHR = this.jqXHR =\n            that._trigger(\n              'submit',\n              $.Event('submit', { delegatedEvent: e }),\n              this\n            ) !== false && that._onSend(e, this);\n        }\n        return this.jqXHR || that._getXHRPromise();\n      };\n      data.abort = function () {\n        if (this.jqXHR) {\n          return this.jqXHR.abort();\n        }\n        this.errorThrown = 'abort';\n        that._trigger('fail', null, this);\n        return that._getXHRPromise(false);\n      };\n      data.state = function () {\n        if (this.jqXHR) {\n          return that._getDeferredState(this.jqXHR);\n        }\n        if (this._processQueue) {\n          return that._getDeferredState(this._processQueue);\n        }\n      };\n      data.processing = function () {\n        return (\n          !this.jqXHR &&\n          this._processQueue &&\n          that._getDeferredState(this._processQueue) === 'pending'\n        );\n      };\n      data.progress = function () {\n        return this._progress;\n      };\n      data.response = function () {\n        return this._response;\n      };\n    },\n\n    // Parses the Range header from the server response\n    // and returns the uploaded bytes:\n    _getUploadedBytes: function (jqXHR) {\n      var range = jqXHR.getResponseHeader('Range'),\n        parts = range && range.split('-'),\n        upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);\n      return upperBytesPos && upperBytesPos + 1;\n    },\n\n    // Uploads a file in multiple, sequential requests\n    // by splitting the file up in multiple blob chunks.\n    // If the second parameter is true, only tests if the file\n    // should be uploaded in chunks, but does not invoke any\n    // upload requests:\n    _chunkedUpload: function (options, testOnly) {\n      options.uploadedBytes = options.uploadedBytes || 0;\n      var that = this,\n        file = options.files[0],\n        fs = file.size,\n        ub = options.uploadedBytes,\n        mcs = options.maxChunkSize || fs,\n        slice = this._blobSlice,\n        dfd = $.Deferred(),\n        promise = dfd.promise(),\n        jqXHR,\n        upload;\n      if (\n        !(\n          this._isXHRUpload(options) &&\n          slice &&\n          (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)\n        ) ||\n        options.data\n      ) {\n        return false;\n      }\n      if (testOnly) {\n        return true;\n      }\n      if (ub >= fs) {\n        file.error = options.i18n('uploadedBytes');\n        return this._getXHRPromise(false, options.context, [\n          null,\n          'error',\n          file.error\n        ]);\n      }\n      // The chunk upload method:\n      upload = function () {\n        // Clone the options object for each chunk upload:\n        var o = $.extend({}, options),\n          currentLoaded = o._progress.loaded;\n        o.blob = slice.call(\n          file,\n          ub,\n          ub + ($.type(mcs) === 'function' ? mcs(o) : mcs),\n          file.type\n        );\n        // Store the current chunk size, as the blob itself\n        // will be dereferenced after data processing:\n        o.chunkSize = o.blob.size;\n        // Expose the chunk bytes position range:\n        o.contentRange =\n          'bytes ' + ub + '-' + (ub + o.chunkSize - 1) + '/' + fs;\n        // Trigger chunkbeforesend to allow form data to be updated for this chunk\n        that._trigger('chunkbeforesend', null, o);\n        // Process the upload data (the blob and potential form data):\n        that._initXHRData(o);\n        // Add progress listeners for this chunk upload:\n        that._initProgressListener(o);\n        jqXHR = (\n          (that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n          that._getXHRPromise(false, o.context)\n        )\n          .done(function (result, textStatus, jqXHR) {\n            ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;\n            // Create a progress event if no final progress event\n            // with loaded equaling total has been triggered\n            // for this chunk:\n            if (currentLoaded + o.chunkSize - o._progress.loaded) {\n              that._onProgress(\n                $.Event('progress', {\n                  lengthComputable: true,\n                  loaded: ub - o.uploadedBytes,\n                  total: ub - o.uploadedBytes\n                }),\n                o\n              );\n            }\n            options.uploadedBytes = o.uploadedBytes = ub;\n            o.result = result;\n            o.textStatus = textStatus;\n            o.jqXHR = jqXHR;\n            that._trigger('chunkdone', null, o);\n            that._trigger('chunkalways', null, o);\n            if (ub < fs) {\n              // File upload not yet complete,\n              // continue with the next chunk:\n              upload();\n            } else {\n              dfd.resolveWith(o.context, [result, textStatus, jqXHR]);\n            }\n          })\n          .fail(function (jqXHR, textStatus, errorThrown) {\n            o.jqXHR = jqXHR;\n            o.textStatus = textStatus;\n            o.errorThrown = errorThrown;\n            that._trigger('chunkfail', null, o);\n            that._trigger('chunkalways', null, o);\n            dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);\n          })\n          .always(function () {\n            that._deinitProgressListener(o);\n          });\n      };\n      this._enhancePromise(promise);\n      promise.abort = function () {\n        return jqXHR.abort();\n      };\n      upload();\n      return promise;\n    },\n\n    _beforeSend: function (e, data) {\n      if (this._active === 0) {\n        // the start callback is triggered when an upload starts\n        // and no other uploads are currently running,\n        // equivalent to the global ajaxStart event:\n        this._trigger('start');\n        // Set timer for global bitrate progress calculation:\n        this._bitrateTimer = new this._BitrateTimer();\n        // Reset the global progress values:\n        this._progress.loaded = this._progress.total = 0;\n        this._progress.bitrate = 0;\n      }\n      // Make sure the container objects for the .response() and\n      // .progress() methods on the data object are available\n      // and reset to their initial state:\n      this._initResponseObject(data);\n      this._initProgressObject(data);\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n      data._progress.total = data.total = this._getTotal(data.files) || 1;\n      data._progress.bitrate = data.bitrate = 0;\n      this._active += 1;\n      // Initialize the global progress values:\n      this._progress.loaded += data.loaded;\n      this._progress.total += data.total;\n    },\n\n    _onDone: function (result, textStatus, jqXHR, options) {\n      var total = options._progress.total,\n        response = options._response;\n      if (options._progress.loaded < total) {\n        // Create a progress event if no final progress event\n        // with loaded equaling total has been triggered:\n        this._onProgress(\n          $.Event('progress', {\n            lengthComputable: true,\n            loaded: total,\n            total: total\n          }),\n          options\n        );\n      }\n      response.result = options.result = result;\n      response.textStatus = options.textStatus = textStatus;\n      response.jqXHR = options.jqXHR = jqXHR;\n      this._trigger('done', null, options);\n    },\n\n    _onFail: function (jqXHR, textStatus, errorThrown, options) {\n      var response = options._response;\n      if (options.recalculateProgress) {\n        // Remove the failed (error or abort) file upload from\n        // the global progress calculation:\n        this._progress.loaded -= options._progress.loaded;\n        this._progress.total -= options._progress.total;\n      }\n      response.jqXHR = options.jqXHR = jqXHR;\n      response.textStatus = options.textStatus = textStatus;\n      response.errorThrown = options.errorThrown = errorThrown;\n      this._trigger('fail', null, options);\n    },\n\n    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n      // jqXHRorResult, textStatus and jqXHRorError are added to the\n      // options object via done and fail callbacks\n      this._trigger('always', null, options);\n    },\n\n    _onSend: function (e, data) {\n      if (!data.submit) {\n        this._addConvenienceMethods(e, data);\n      }\n      var that = this,\n        jqXHR,\n        aborted,\n        slot,\n        pipe,\n        options = that._getAJAXSettings(data),\n        send = function () {\n          that._sending += 1;\n          // Set timer for bitrate progress calculation:\n          options._bitrateTimer = new that._BitrateTimer();\n          jqXHR =\n            jqXHR ||\n            (\n              ((aborted ||\n                that._trigger(\n                  'send',\n                  $.Event('send', { delegatedEvent: e }),\n                  options\n                ) === false) &&\n                that._getXHRPromise(false, options.context, aborted)) ||\n              that._chunkedUpload(options) ||\n              $.ajax(options)\n            )\n              .done(function (result, textStatus, jqXHR) {\n                that._onDone(result, textStatus, jqXHR, options);\n              })\n              .fail(function (jqXHR, textStatus, errorThrown) {\n                that._onFail(jqXHR, textStatus, errorThrown, options);\n              })\n              .always(function (jqXHRorResult, textStatus, jqXHRorError) {\n                that._deinitProgressListener(options);\n                that._onAlways(\n                  jqXHRorResult,\n                  textStatus,\n                  jqXHRorError,\n                  options\n                );\n                that._sending -= 1;\n                that._active -= 1;\n                if (\n                  options.limitConcurrentUploads &&\n                  options.limitConcurrentUploads > that._sending\n                ) {\n                  // Start the next queued upload,\n                  // that has not been aborted:\n                  var nextSlot = that._slots.shift();\n                  while (nextSlot) {\n                    if (that._getDeferredState(nextSlot) === 'pending') {\n                      nextSlot.resolve();\n                      break;\n                    }\n                    nextSlot = that._slots.shift();\n                  }\n                }\n                if (that._active === 0) {\n                  // The stop callback is triggered when all uploads have\n                  // been completed, equivalent to the global ajaxStop event:\n                  that._trigger('stop');\n                }\n              });\n          return jqXHR;\n        };\n      this._beforeSend(e, options);\n      if (\n        this.options.sequentialUploads ||\n        (this.options.limitConcurrentUploads &&\n          this.options.limitConcurrentUploads <= this._sending)\n      ) {\n        if (this.options.limitConcurrentUploads > 1) {\n          slot = $.Deferred();\n          this._slots.push(slot);\n          pipe = slot[that._promisePipe](send);\n        } else {\n          this._sequence = this._sequence[that._promisePipe](send, send);\n          pipe = this._sequence;\n        }\n        // Return the piped Promise object, enhanced with an abort method,\n        // which is delegated to the jqXHR object of the current upload,\n        // and jqXHR callbacks mapped to the equivalent Promise methods:\n        pipe.abort = function () {\n          aborted = [undefined, 'abort', 'abort'];\n          if (!jqXHR) {\n            if (slot) {\n              slot.rejectWith(options.context, aborted);\n            }\n            return send();\n          }\n          return jqXHR.abort();\n        };\n        return this._enhancePromise(pipe);\n      }\n      return send();\n    },\n\n    _onAdd: function (e, data) {\n      var that = this,\n        result = true,\n        options = $.extend({}, this.options, data),\n        files = data.files,\n        filesLength = files.length,\n        limit = options.limitMultiFileUploads,\n        limitSize = options.limitMultiFileUploadSize,\n        overhead = options.limitMultiFileUploadSizeOverhead,\n        batchSize = 0,\n        paramName = this._getParamName(options),\n        paramNameSet,\n        paramNameSlice,\n        fileSet,\n        i,\n        j = 0;\n      if (!filesLength) {\n        return false;\n      }\n      if (limitSize && files[0].size === undefined) {\n        limitSize = undefined;\n      }\n      if (\n        !(options.singleFileUploads || limit || limitSize) ||\n        !this._isXHRUpload(options)\n      ) {\n        fileSet = [files];\n        paramNameSet = [paramName];\n      } else if (!(options.singleFileUploads || limitSize) && limit) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i += limit) {\n          fileSet.push(files.slice(i, i + limit));\n          paramNameSlice = paramName.slice(i, i + limit);\n          if (!paramNameSlice.length) {\n            paramNameSlice = paramName;\n          }\n          paramNameSet.push(paramNameSlice);\n        }\n      } else if (!options.singleFileUploads && limitSize) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i = i + 1) {\n          batchSize += files[i].size + overhead;\n          if (\n            i + 1 === filesLength ||\n            batchSize + files[i + 1].size + overhead > limitSize ||\n            (limit && i + 1 - j >= limit)\n          ) {\n            fileSet.push(files.slice(j, i + 1));\n            paramNameSlice = paramName.slice(j, i + 1);\n            if (!paramNameSlice.length) {\n              paramNameSlice = paramName;\n            }\n            paramNameSet.push(paramNameSlice);\n            j = i + 1;\n            batchSize = 0;\n          }\n        }\n      } else {\n        paramNameSet = paramName;\n      }\n      data.originalFiles = files;\n      $.each(fileSet || files, function (index, element) {\n        var newData = $.extend({}, data);\n        newData.files = fileSet ? element : [element];\n        newData.paramName = paramNameSet[index];\n        that._initResponseObject(newData);\n        that._initProgressObject(newData);\n        that._addConvenienceMethods(e, newData);\n        result = that._trigger(\n          'add',\n          $.Event('add', { delegatedEvent: e }),\n          newData\n        );\n        return result;\n      });\n      return result;\n    },\n\n    _replaceFileInput: function (data) {\n      var input = data.fileInput,\n        inputClone = input.clone(true),\n        restoreFocus = input.is(document.activeElement);\n      // Add a reference for the new cloned file input to the data argument:\n      data.fileInputClone = inputClone;\n      $('<form></form>').append(inputClone)[0].reset();\n      // Detaching allows to insert the fileInput on another form\n      // without losing the file input value:\n      input.after(inputClone).detach();\n      // If the fileInput had focus before it was detached,\n      // restore focus to the inputClone.\n      if (restoreFocus) {\n        inputClone.trigger('focus');\n      }\n      // Avoid memory leaks with the detached file input:\n      $.cleanData(input.off('remove'));\n      // Replace the original file input element in the fileInput\n      // elements set with the clone, which has been copied including\n      // event handlers:\n      this.options.fileInput = this.options.fileInput.map(function (i, el) {\n        if (el === input[0]) {\n          return inputClone[0];\n        }\n        return el;\n      });\n      // If the widget has been initialized on the file input itself,\n      // override this.element with the file input clone:\n      if (input[0] === this.element[0]) {\n        this.element = inputClone;\n      }\n    },\n\n    _handleFileTreeEntry: function (entry, path) {\n      var that = this,\n        dfd = $.Deferred(),\n        entries = [],\n        dirReader,\n        errorHandler = function (e) {\n          if (e && !e.entry) {\n            e.entry = entry;\n          }\n          // Since $.when returns immediately if one\n          // Deferred is rejected, we use resolve instead.\n          // This allows valid files and invalid items\n          // to be returned together in one set:\n          dfd.resolve([e]);\n        },\n        successHandler = function (entries) {\n          that\n            ._handleFileTreeEntries(entries, path + entry.name + '/')\n            .done(function (files) {\n              dfd.resolve(files);\n            })\n            .fail(errorHandler);\n        },\n        readEntries = function () {\n          dirReader.readEntries(function (results) {\n            if (!results.length) {\n              successHandler(entries);\n            } else {\n              entries = entries.concat(results);\n              readEntries();\n            }\n          }, errorHandler);\n        };\n      // eslint-disable-next-line no-param-reassign\n      path = path || '';\n      if (entry.isFile) {\n        if (entry._file) {\n          // Workaround for Chrome bug #149735\n          entry._file.relativePath = path;\n          dfd.resolve(entry._file);\n        } else {\n          entry.file(function (file) {\n            file.relativePath = path;\n            dfd.resolve(file);\n          }, errorHandler);\n        }\n      } else if (entry.isDirectory) {\n        dirReader = entry.createReader();\n        readEntries();\n      } else {\n        // Return an empty list for file system items\n        // other than files or directories:\n        dfd.resolve([]);\n      }\n      return dfd.promise();\n    },\n\n    _handleFileTreeEntries: function (entries, path) {\n      var that = this;\n      return $.when\n        .apply(\n          $,\n          $.map(entries, function (entry) {\n            return that._handleFileTreeEntry(entry, path);\n          })\n        )\n        [this._promisePipe](function () {\n          return Array.prototype.concat.apply([], arguments);\n        });\n    },\n\n    _getDroppedFiles: function (dataTransfer) {\n      // eslint-disable-next-line no-param-reassign\n      dataTransfer = dataTransfer || {};\n      var items = dataTransfer.items;\n      if (\n        items &&\n        items.length &&\n        (items[0].webkitGetAsEntry || items[0].getAsEntry)\n      ) {\n        return this._handleFileTreeEntries(\n          $.map(items, function (item) {\n            var entry;\n            if (item.webkitGetAsEntry) {\n              entry = item.webkitGetAsEntry();\n              if (entry) {\n                // Workaround for Chrome bug #149735:\n                entry._file = item.getAsFile();\n              }\n              return entry;\n            }\n            return item.getAsEntry();\n          })\n        );\n      }\n      return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();\n    },\n\n    _getSingleFileInputFiles: function (fileInput) {\n      // eslint-disable-next-line no-param-reassign\n      fileInput = $(fileInput);\n      var entries = fileInput.prop('entries'),\n        files,\n        value;\n      if (entries && entries.length) {\n        return this._handleFileTreeEntries(entries);\n      }\n      files = $.makeArray(fileInput.prop('files'));\n      if (!files.length) {\n        value = fileInput.prop('value');\n        if (!value) {\n          return $.Deferred().resolve([]).promise();\n        }\n        // If the files property is not available, the browser does not\n        // support the File API and we add a pseudo File object with\n        // the input value as name with path information removed:\n        files = [{ name: value.replace(/^.*\\\\/, '') }];\n      } else if (files[0].name === undefined && files[0].fileName) {\n        // File normalization for Safari 4 and Firefox 3:\n        $.each(files, function (index, file) {\n          file.name = file.fileName;\n          file.size = file.fileSize;\n        });\n      }\n      return $.Deferred().resolve(files).promise();\n    },\n\n    _getFileInputFiles: function (fileInput) {\n      if (!(fileInput instanceof $) || fileInput.length === 1) {\n        return this._getSingleFileInputFiles(fileInput);\n      }\n      return $.when\n        .apply($, $.map(fileInput, this._getSingleFileInputFiles))\n        [this._promisePipe](function () {\n          return Array.prototype.concat.apply([], arguments);\n        });\n    },\n\n    _onChange: function (e) {\n      var that = this,\n        data = {\n          fileInput: $(e.target),\n          form: $(e.target.form)\n        };\n      this._getFileInputFiles(data.fileInput).always(function (files) {\n        data.files = files;\n        if (that.options.replaceFileInput) {\n          that._replaceFileInput(data);\n        }\n        if (\n          that._trigger(\n            'change',\n            $.Event('change', { delegatedEvent: e }),\n            data\n          ) !== false\n        ) {\n          that._onAdd(e, data);\n        }\n      });\n    },\n\n    _onPaste: function (e) {\n      var items =\n          e.originalEvent &&\n          e.originalEvent.clipboardData &&\n          e.originalEvent.clipboardData.items,\n        data = { files: [] };\n      if (items && items.length) {\n        $.each(items, function (index, item) {\n          var file = item.getAsFile && item.getAsFile();\n          if (file) {\n            data.files.push(file);\n          }\n        });\n        if (\n          this._trigger(\n            'paste',\n            $.Event('paste', { delegatedEvent: e }),\n            data\n          ) !== false\n        ) {\n          this._onAdd(e, data);\n        }\n      }\n    },\n\n    _onDrop: function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var that = this,\n        dataTransfer = e.dataTransfer,\n        data = {};\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n        e.preventDefault();\n        this._getDroppedFiles(dataTransfer).always(function (files) {\n          data.files = files;\n          if (\n            that._trigger(\n              'drop',\n              $.Event('drop', { delegatedEvent: e }),\n              data\n            ) !== false\n          ) {\n            that._onAdd(e, data);\n          }\n        });\n      }\n    },\n\n    _onDragOver: getDragHandler('dragover'),\n\n    _onDragEnter: getDragHandler('dragenter'),\n\n    _onDragLeave: getDragHandler('dragleave'),\n\n    _initEventHandlers: function () {\n      if (this._isXHRUpload(this.options)) {\n        this._on(this.options.dropZone, {\n          dragover: this._onDragOver,\n          drop: this._onDrop,\n          // event.preventDefault() on dragenter is required for IE10+:\n          dragenter: this._onDragEnter,\n          // dragleave is not required, but added for completeness:\n          dragleave: this._onDragLeave\n        });\n        this._on(this.options.pasteZone, {\n          paste: this._onPaste\n        });\n      }\n      if ($.support.fileInput) {\n        this._on(this.options.fileInput, {\n          change: this._onChange\n        });\n      }\n    },\n\n    _destroyEventHandlers: function () {\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n      this._off(this.options.pasteZone, 'paste');\n      this._off(this.options.fileInput, 'change');\n    },\n\n    _destroy: function () {\n      this._destroyEventHandlers();\n    },\n\n    _setOption: function (key, value) {\n      var reinit = $.inArray(key, this._specialOptions) !== -1;\n      if (reinit) {\n        this._destroyEventHandlers();\n      }\n      this._super(key, value);\n      if (reinit) {\n        this._initSpecialOptions();\n        this._initEventHandlers();\n      }\n    },\n\n    _initSpecialOptions: function () {\n      var options = this.options;\n      if (options.fileInput === undefined) {\n        options.fileInput = this.element.is('input[type=\"file\"]')\n          ? this.element\n          : this.element.find('input[type=\"file\"]');\n      } else if (!(options.fileInput instanceof $)) {\n        options.fileInput = $(options.fileInput);\n      }\n      if (!(options.dropZone instanceof $)) {\n        options.dropZone = $(options.dropZone);\n      }\n      if (!(options.pasteZone instanceof $)) {\n        options.pasteZone = $(options.pasteZone);\n      }\n    },\n\n    _getRegExp: function (str) {\n      var parts = str.split('/'),\n        modifiers = parts.pop();\n      parts.shift();\n      return new RegExp(parts.join('/'), modifiers);\n    },\n\n    _isRegExpOption: function (key, value) {\n      return (\n        key !== 'url' &&\n        $.type(value) === 'string' &&\n        /^\\/.*\\/[igm]{0,3}$/.test(value)\n      );\n    },\n\n    _initDataAttributes: function () {\n      var that = this,\n        options = this.options,\n        data = this.element.data();\n      // Initialize options set via HTML5 data-attributes:\n      $.each(this.element[0].attributes, function (index, attr) {\n        var key = attr.name.toLowerCase(),\n          value;\n        if (/^data-/.test(key)) {\n          // Convert hyphen-ated key to camelCase:\n          key = key.slice(5).replace(/-[a-z]/g, function (str) {\n            return str.charAt(1).toUpperCase();\n          });\n          value = data[key];\n          if (that._isRegExpOption(key, value)) {\n            value = that._getRegExp(value);\n          }\n          options[key] = value;\n        }\n      });\n    },\n\n    _create: function () {\n      this._initDataAttributes();\n      this._initSpecialOptions();\n      this._slots = [];\n      this._sequence = this._getXHRPromise(true);\n      this._sending = this._active = 0;\n      this._initProgressObject(this);\n      this._initEventHandlers();\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the number of active uploads:\n    active: function () {\n      return this._active;\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the widget upload progress.\n    // It returns an object with loaded, total and bitrate properties\n    // for the running uploads:\n    progress: function () {\n      return this._progress;\n    },\n\n    // This method is exposed to the widget API and allows adding files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files property and can contain additional options:\n    // .fileupload('add', {files: filesList});\n    add: function (data) {\n      var that = this;\n      if (!data || this.options.disabled) {\n        return;\n      }\n      if (data.fileInput && !data.files) {\n        this._getFileInputFiles(data.fileInput).always(function (files) {\n          data.files = files;\n          that._onAdd(null, data);\n        });\n      } else {\n        data.files = $.makeArray(data.files);\n        this._onAdd(null, data);\n      }\n    },\n\n    // This method is exposed to the widget API and allows sending files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files or fileInput property and can contain additional options:\n    // .fileupload('send', {files: filesList});\n    // The method returns a Promise object for the file upload call.\n    send: function (data) {\n      if (data && !this.options.disabled) {\n        if (data.fileInput && !data.files) {\n          var that = this,\n            dfd = $.Deferred(),\n            promise = dfd.promise(),\n            jqXHR,\n            aborted;\n          promise.abort = function () {\n            aborted = true;\n            if (jqXHR) {\n              return jqXHR.abort();\n            }\n            dfd.reject(null, 'abort', 'abort');\n            return promise;\n          };\n          this._getFileInputFiles(data.fileInput).always(function (files) {\n            if (aborted) {\n              return;\n            }\n            if (!files.length) {\n              dfd.reject();\n              return;\n            }\n            data.files = files;\n            jqXHR = that._onSend(null, data);\n            jqXHR.then(\n              function (result, textStatus, jqXHR) {\n                dfd.resolve(result, textStatus, jqXHR);\n              },\n              function (jqXHR, textStatus, errorThrown) {\n                dfd.reject(jqXHR, textStatus, errorThrown);\n              }\n            );\n          });\n          return this._enhancePromise(promise);\n        }\n        data.files = $.makeArray(data.files);\n        if (data.files.length) {\n          return this._onSend(null, data);\n        }\n      }\n      return this._getXHRPromise(false, data && data.context);\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}